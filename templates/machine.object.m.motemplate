// DO NOT EDIT. This file is machine-generated and constantly overwritten.
// Make changes to <$managedObjectMappingClassNameWithSuffix$>.m instead.

#import "_<$managedObjectMappingClassNameWithSuffix$>.h"

//property mapping according to MagicalRecord
<$foreach Attribute noninheritedAttributes do$>
	<$if Attribute.objectAttributeMapKeys.@count > 0$>
const struct <$managedObjectMappingClassNameWithSuffix$><$Attribute.name.initialCapitalString$>MapKeys <$managedObjectMappingClassNameWithSuffix$><$Attribute.name.initialCapitalString$>MapKeys = {<$foreach Key Attribute.objectAttributeMapKeys do$>
	.<$Key.mapKeyName$> = @"<$Key.description$>",<$endforeach do$>
};
<$endif$>
<$endforeach do$>

<$foreach Relationship noninheritedRelationships do$>
	<$if Relationship.objectRelationshipMapKeys.@count > 0$>
const struct <$managedObjectMappingClassNameWithSuffix$><$Relationship.name.initialCapitalString$>MapKeys <$managedObjectMappingClassNameWithSuffix$><$Relationship.name.initialCapitalString$>MapKeys = {<$foreach Key Relationship.objectRelationshipMapKeys do$>
	.<$Key.mapKeyName$> = @"<$Key.description$>",<$endforeach do$>
};
<$endforeach do$>


@interface _<$managedObjectMappingClassNameWithSuffix$> : () {}
<$if TemplateVar.arc$>
@property (nonatomic, strong) NSDictionary *mapping;
<$else$>
@property (nonatomic, retain) NSDictionary *mapping;
<$endif$>
@end

@implementation _<$managedObjectMappingClassNameWithSuffix$>

- (id)initWithAttributes:(NSDictionary *)attributes {
<$if hasCustomSuperentityObject$>
	if (self = [super initWithAttributes:attributes]) {
<$else$>
	if (self = [self init]) {
<$endif$>
		NSString *tmpValue = nil;
		NSString *tmpKey = nil;
		NSMutableDictionary *tmpMapping = [NSMutableDictionary dictionary];
		
//loop atribute
<$if noninheritedAttributes.@count > 0$>
<$foreach Attribute noninheritedAttributes do$>
<$if Attribute.hasDefinedAttributeType$>
		tmpKey = [<$Attribute.objectAttributeMapKeysDesc$> valueForKeyPath:@"<$Attribute.name$>"];
		if (tmpKey && ![tmpKey isEqual:[NSNull null]]) {
			[mapping addEntriesFromDictionary:@{@"<$Attribute.name$>", tmpKey}];
			tmpValue = [attributes valueForKeyPath:tmpKey];
			if (![tmpValue isEqual:[NSNull null]]) {
				self.<$Attribute.name$> = tmpValue;
			}
			<$if Attribute.hasDefaultValue$>else {
				self.<$Attribute.name$> = <$Attribute.defaultValueDesc$>;
			}
			<$endif$>
		}
<$endif$>
<$endforeach$>
<$endif$>
//loop relationShip
<$if noninheritedRelationships.@count > 0$>
<$foreach Relationship noninheritedRelationships do$>
		tmpKey = [<$Relationship.objectRelationshipMapKeysDesc$> valueForKeyPath:@"<$Relationship.name$>"];
		if (tmpKey && ![tmpKey isEqual:[NSNull null]]) {
			[mapping addEntriesFromDictionary:@{@"<$Relationship.name$>", tmpKey}];
			tmpValue = [attributes valueForKeyPath:tmpKey];
			if (![tmpValue isEqual:[NSNull null]]) {
				self.<$Relationship.name$> = tmpValue;
			}
			<$endif$>
		}
<$endforeach$>
<$endif$>
	}
	return self;
}

//one-many relationShip
<$foreach Relationship noninheritedRelationships do$>
	<$if Relationship.isToMany$>
- (<$Relationship.mutableUnorderedCollectionClassName$>*)<$Relationship.name$>Array {
	<$Relationship.mutableUnorderedCollectionClassName$> *result = (<$Relationship.mutableUnorderedCollectionClassName$>*)[self mutableArrayValueForKey:@"<$Relationship.name$>"];
	return result;
}
- (void)add<$Relationship.name.initialCapitalString$>:(<$Relationship.immutableCollectionClassName$>*)value_ {
	[self.<$Relationship.name$>Array addObjectsFromArray:value_];
}
- (void)remove<$Relationship.name.initialCapitalString$>:(<$Relationship.immutableCollectionClassName$>*)value_ {
	[self.<$Relationship.name$>Array removeObjectsInArray:value_];
}
- (void)add<$Relationship.name.initialCapitalString$>Object:(<$Relationship.destinationEntity.managedObjectClassName$>*)value_ {
	[self.<$Relationship.name$>Array addObject:value_];
}
- (void)remove<$Relationship.name.initialCapitalString$>Object:(<$Relationship.destinationEntity.managedObjectClassName$>*)value_ {
	[self.<$Relationship.name$>Array removeObject:value_];
}
	<$endif$>
<$endforeach do$>





@end

